import silhouetteCoefficient from "../src/silhouette.js";
// import sil2 from "./sil2.js";
import { spawn } from "child_process";

const data = [
  [-7.15524373, -7.39001621],
  [-7.39587521, -7.11084292],
  [-2.01567068, 8.28177994],
  [4.50927011, 2.6324358],
  [-8.10250191, -7.48496138],
  [5.15447461, 1.87720657],
  [-2.40528907, 9.24547656],
  [4.88763771, 1.63493495],
  [-2.79670217, 8.90289074],
  [-3.22397972, 9.40821829],
  [-2.87022159, 10.12565304],
  [4.85408813, 1.55742393],
  [-2.38387947, 7.83848405],
  [-3.35842007, 8.76189893],
  [-7.27001273, -7.17238482],
  [-2.93042948, 8.81768884],
  [-7.85615265, -6.85125863],
  [3.42479328, 2.08504227],
  [-2.45095109, 9.59547312],
  [-2.15708337, 10.3285595],
  [-1.81404028, 8.52187674],
  [-2.60596905, 9.25671664],
  [5.22495068, 1.88493526],
  [-6.94702402, -7.01269135],
  [-2.78724824, 8.73484828],
  [-6.56174468, -6.01516842],
  [-7.22568999, -6.42687486],
  [4.14894643, 3.22860205],
  [4.63253077, 1.43481706],
  [-3.04290628, 8.52479996],
  [-3.10351942, 8.67450749],
  [-3.15173312, 9.30376958],
  [-6.3814257, -7.39375989],
  [-2.38074138, 8.26684286],
  [-7.78874183, -6.05998503],
  [-2.37272166, 9.79857178],
  [-6.42543402, -7.43340879],
  [4.78685878, 1.66900378],
  [-6.94384541, -7.50125499],
  [4.84493242, 3.09887219],
  [5.40002553, 1.548568],
  [-2.35466739, 8.96961858],
  [-7.17219093, -7.13964451],
  [4.57115493, 2.71585947],
  [-2.53002468, 8.31307931],
  [-2.29236026, 9.93710807],
  [-6.83668745, -7.16670406],
  [4.34866071, 2.02229417],
  [-6.67706559, -7.12723577],
  [5.59148893, 1.23048038],
  [4.68536157, 1.56687266],
  [-6.88441078, -5.99214311],
  [-6.65966824, -7.44403747],
  [-1.6224612, 8.703324],
  [-6.17204888, -6.8395985],
  [4.94890745, 4.28480858],
  [-6.64295591, -7.13270028],
  [-1.93117195, 9.26195468],
  [4.70798924, 2.37044809],
  [-2.78558089, 9.64855946],
  [-6.73825846, -6.41759048],
  [5.91969886, 0.801917],
  [5.17963876, 2.1575494],
  [-5.03229871, -6.20836465],
  [-7.02900568, -6.29716702],
  [4.10083003, 2.26832119],
  [4.2088123, 1.84510139],
  [-6.45265826, -7.55489485],
  [-7.90165665, -6.91343821],
  [-3.14657985, 9.29844159],
  [5.42316612, 1.98577199],
  [-6.2445725, -7.93535329],
  [-7.2994625, -6.75172165],
  [-2.22525505, 8.97058878],
  [-2.74446251, 8.13617716],
  [-6.7173531, -6.91025246],
  [-8.12009245, -6.93358162],
  [4.18439924, 2.06340596],
  [-2.86958084, 8.83926988],
  [5.34754291, 1.69166429],
  [-3.1168963, 9.20283453],
  [-2.5524037, 9.61640587],
  [-6.57907688, -7.46664274],
  [-2.31043956, 9.5996132],
  [5.21013314, 1.62702749],
  [-6.37821192, -7.55793371],
  [-6.17895795, -6.72745709],
  [-1.38973292, 9.29858588],
  [5.69915138, 2.21615871],
  [-3.33579924, 8.4515911],
  [-7.88127036, -6.55409348],
  [-2.53069325, 9.95307232],
  [-6.5922393, -6.67991233],
  [-1.95995635, 9.21153679],
  [-2.82705375, 9.32224659],
  [-7.21181677, -7.59883633],
  [-7.52019945, -6.96553728],
  [-2.35326795, 9.48337985],
  [-7.33758269, -7.96303885],
  [-6.63156625, -5.75403211],
  [4.35491165, 1.58117214],
  [-2.29452521, 9.35075684],
  [4.51500549, 1.67736912],
  [-2.03457845, 8.46865366],
  [-3.01272814, 8.8287587],
  [-2.36402026, 7.86631798],
  [-2.30302665, 7.95646203],
  [-2.35890191, 9.22215505],
  [5.93178831, 1.51276115],
  [-7.71876774, -6.54232805],
  [5.05163495, 1.00554016],
  [-2.9791496, 8.82104922],
  [-2.99429378, 8.7132319],
  [-2.4686807, 8.15943722],
  [-2.51729596, 8.37965957],
  [4.75931465, 1.61303956],
  [-7.50197488, -6.9943128],
  [3.61199812, 2.78549311],
  [-8.00210234, -7.09101768],
  [4.03626841, 1.24465652],
  [4.95148674, 2.89281303],
  [4.77433433, 1.98072512],
  [-1.66752104, 8.17317549],
  [-6.53369301, -6.6933595],
  [-6.68023878, -7.32920152],
  [-6.95637775, -7.45343386],
  [-6.51112717, -6.42560497],
  [-2.91535082, 9.3812919],
  [-6.25710322, -7.18611943],
  [-7.19778176, -7.35583329],
  [-1.85936688, 9.64656736],
  [-3.66046035, 8.9983778],
  [-2.45414116, 7.82174478],
  [-3.54414832, 8.67691361],
  [-3.39631082, 8.5823796],
  [4.9428712, 2.4926228],
  [4.48833795, 1.22449977],
  [-7.04155215, -7.46736782],
  [-2.50612955, 8.87353385],
  [-7.18794734, -7.51563771],
  [-2.79088225, 9.33982215],
  [-2.65643049, 8.56204443],
  [-5.64317844, -5.82690509],
  [-2.45696938, 8.83488172],
  [3.72825686, 1.68262924],
  [4.21069661, 2.38092833],
  [5.12759611, 2.35094699],
  [-2.34318314, 9.51059608],
  [5.40647777, 1.61822685],
  [-2.91721246, 9.15363835],
  [-3.05401207, 8.16690391],
  [-5.70079211, -6.85895146],
  [4.80847396, 1.59954997],
  [-7.80009569, -6.1135035],
  [-2.33152546, 9.17091929],
  [3.91970099, 1.77246894],
  [4.62877095, 1.7999745],
  [-7.19792788, -7.22560054],
  [-6.49647172, -7.87702163],
  [-3.03951208, 9.10652119],
  [-4.08104469, 9.50742763],
  [-7.40499814, -7.70978943],
  [-5.94893601, -6.81070481],
  [-6.15889884, -7.12495482],
  [-2.47427239, 8.32850395],
  [-6.35695237, -7.07572371],
  [4.35725585, 2.11239965],
  [-2.4730595, 10.4922314],
  [-2.19603268, 9.19247693],
  [-2.02108729, 8.27576754],
  [-1.82350393, 9.46544595],
  [-3.06085216, 9.94424677],
  [4.13604573, 1.6135341],
  [-2.77710659, 9.5281254],
  [4.05097365, 2.25043177],
  [4.65458494, 2.27196866],
  [5.16327122, 2.08317489],
  [-2.66799172, 10.64638763],
  [5.91317255, 2.59264884],
  [5.01435073, 2.35017699],
  [-6.82767332, -6.97351593],
  [-2.83582726, 9.08083968],
  [-7.27720145, -6.53775039],
  [5.61932562, 1.11508486],
  [4.98241314, 2.65450907],
  [-8.36261389, -7.35824675],
  [4.83437865, 1.89508385],
  [-1.62980836, 8.87882035],
  [2.69511843, 1.3585371],
  [4.37585214, 2.05161403],
  [-6.91723465, -6.3070242],
  [-5.90245786, -7.70817047],
  [4.14458052, 1.78033818],
  [-7.84349498, -6.75803141],
  [4.20165886, 2.10304484],
  [3.84773891, 3.07204494],
  [4.62846911, 1.37165207],
  [5.92624529, 2.3535211],
  [-3.09400663, 9.48653689],
  [-6.77050744, -6.73117724],
  [-2.06611768, 9.1171071],
  [-2.57858659, 8.83362391],
  [4.1465466, 2.11938201],
  [4.28625998, 2.48293094],
  [-2.02168213, 9.82803015],
  [4.82642338, 2.85838341],
  [-7.47106282, -6.57768168],
  [-7.26757092, -7.5290384],
  [4.69807642, 2.3302639],
  [-2.29221601, 8.62721428],
  [-2.4494068, 8.71220074],
  [-7.45858127, -6.46847872],
  [5.510565, 2.54873218],
  [3.88334846, 2.52388685],
  [-6.85051421, -7.37867966],
  [-5.97821296, -6.83565273],
  [-6.49995807, -5.51769388],
  [-6.53338391, -7.00193682],
  [-3.25136805, 8.22201216],
  [-7.04465821, -8.26126229],
  [-6.38198384, -8.20679078],
  [3.3655414, 1.65771667],
  [-7.33343764, -7.73346182],
  [-7.66230889, -6.47830606],
  [-2.50139649, 9.88640657],
  [4.16436639, 1.90432782],
  [-7.14620315, -6.6537293],
  [-5.86734221, -6.35112574],
  [4.45071729, 2.42855122],
  [-2.55545865, 9.21897731],
  [-2.01596153, 10.15236192],
  [-6.32392066, -5.73445961],
  [-2.71482633, 8.53291977],
  [-7.5895823, -8.1036489],
  [4.66722194, 1.58220948],
  [5.04905062, 1.78700963],
  [-7.27072886, -6.85167039],
  [4.62733788, 2.04356611],
  [-5.89264656, -7.02953122],
  [-6.91927507, -7.60671931],
  [-6.70576228, -5.63486911],
  [4.83350997, 1.47683112],
  [5.33474536, 2.4481673],
  [-2.13379721, 8.49999159],
  [-5.96575274, -6.55676357],
  [3.68322224, 1.61354467],
  [5.05396523, 1.7324374],
  [4.64302506, 2.00135804],
  [-6.72379369, -7.42269957],
  [4.96813726, 1.85185409],
  [-6.65693967, -7.24250071],
  [4.57462275, 2.21419672],
  [-7.23506355, -7.39850406],
  [6.02867398, 0.85281057],
  [5.9537606, 1.48819071],
  [-6.68347077, -7.01156991],
  [4.08372055, 1.93745447],
  [-3.30610925, 9.13240287],
  [-7.76677894, -6.19385717],
  [-2.33335414, 8.58567528],
  [-2.64327529, 9.44268642],
  [-1.89059791, 9.5730542],
  [-6.83320621, -7.39688011],
  [-3.43959568, 9.05542391],
  [5.13512865, 2.46127547],
  [4.24280696, 2.48462968],
  [-6.80744981, -6.57144629],
  [4.68176009, 1.74198153],
  [5.088255, 2.33939184],
  [-2.6246142, 9.19521453],
  [-1.56166993, 9.47474697],
  [4.6984845, 1.50936381],
  [4.35671972, 2.62654004],
  [4.9489, 2.28144125],
  [-6.82002781, -6.42927732],
  [-6.27585151, -7.22624471],
  [-7.04127129, -6.44958424],
  [-3.17299861, 8.29656215],
  [-1.37748608, 9.11903282],
  [-3.01727385, 8.10537779],
  [4.17618371, 1.83107852],
  [4.90617049, 2.43795012],
  [5.50464281, 1.11165239],
  [3.77102823, 1.12869142],
  [-6.67652935, -7.12928234],
  [4.67844685, 1.32652282],
  [-6.49240162, -6.05893066],
  [5.21227989, 2.36400443],
  [4.54880778, 2.32616001],
  [-6.64918792, -6.89972644],
  [-2.31474724, 8.78323676],
  [4.36983955, 2.34687964],
  [5.33777709, 1.97930952],
  [-2.64100076, 9.22855367],
  [-7.02299602, -7.42464779],
  [-3.19979377, 9.23970494],
  [4.14248183, 1.63706106],
  [-3.47368756, 9.12506644],
  [-6.86857616, -5.87424721],
  [-6.35786364, -6.06672688],
];

const labels = [
  1, 1, 0, 2, 1, 2, 0, 2, 0, 0, 0, 2, 0, 0, 1, 0, 1, 2, 0, 0, 0, 0, 2, 1, 0, 1, 1, 2, 2, 0, 0, 0, 1, 0, 1, 0,
  1, 2, 1, 2, 2, 0, 1, 2, 0, 0, 1, 2, 1, 2, 2, 1, 1, 0, 1, 2, 1, 0, 2, 0, 1, 2, 2, 1, 1, 2, 2, 1, 1, 0, 2, 1,
  1, 0, 0, 1, 1, 2, 0, 2, 0, 0, 1, 0, 2, 1, 1, 0, 2, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 2, 0, 2, 0, 0, 0, 0, 0,
  2, 1, 2, 0, 0, 0, 0, 2, 1, 2, 1, 2, 2, 2, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 2, 2, 1, 0, 1, 0, 0, 1, 0,
  2, 2, 2, 0, 2, 0, 0, 1, 2, 1, 0, 2, 2, 1, 1, 0, 0, 1, 1, 1, 0, 1, 2, 0, 0, 0, 0, 0, 2, 0, 2, 2, 2, 0, 2, 2,
  1, 0, 1, 2, 2, 1, 2, 0, 2, 2, 1, 1, 2, 1, 2, 2, 2, 2, 0, 1, 0, 0, 2, 2, 0, 2, 1, 1, 2, 0, 0, 1, 2, 2, 1, 1,
  1, 1, 0, 1, 1, 2, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1, 0, 1, 2, 2, 1, 2, 1, 1, 1, 2, 2, 0, 1, 2, 2, 2, 1, 2, 1, 2,
  1, 2, 2, 1, 2, 0, 1, 0, 0, 0, 1, 0, 2, 2, 1, 2, 2, 0, 0, 2, 2, 2, 1, 1, 1, 0, 0, 0, 2, 2, 2, 2, 1, 2, 1, 2,
  2, 1, 0, 2, 2, 0, 1, 0, 2, 0, 1, 1,
];

const data2 = [
  [-4.77, -2.42, -6.09],
  [0.58, -4.4, 9.68],
  [-5.56, -0.74, 0.23],
  [8.99, 3.78, 4.16],
  [-9.41, -8.73, -6.07],
  [4.98, -4.83, -3.28],
  [-7.53, -6.01, 1.49],
  [7.13, -6.39, 7.91],
  [-9.56, 2.16, -6.78],
  [5.28, -4.24, -0.56],
  [2.09, -1.74, -6.4],
  [-2.97, -9.41, -3.45],
  [4.32, -3.94, 9.81],
  [9.81, 2.78, 3.19],
  [0.58, 0.56, -4.42],
  [6.55, -8.38, 1.33],
  [-7.98, 7.23, 3.05],
  [-7.87, 7.21, -8.51],
  [-6.88, -7.82, -8.12],
  [-9.61, 0.56, -2.51],
];

const labels2 = [1, 1, 0, 2, 1, 2, 0, 2, 0, 0, 0, 2, 0, 0, 1, 0, 1, 2, 0, 0];
// const labels2 = [2, 2, 1, 3, 2, 3, 1, 3, 1, 1, 1, 3, 1, 1, 2, 1, 2, 3, 1, 1, 1];

console.log(silhouetteCoefficient(data2, labels2));
// console.log(silhouetteCoefficient([[-3], [3], [5]], [0, 3, 3]));
// console.log(
//   silhouetteCoefficient(
//     [
//       [-4.53002701056628, -7.281625424345615, 6.554266728149855, -8.297348274870181],
//       [-6.278333872997113, 3.4586395898531954, 2.2882035252358577, 2.7804340664551663],
//     ],
//     [1, 0],
//   ),
// );

// const runPy = (inputData) =>
//   new Promise(function (resolve, reject) {
//     const pyProgr = spawn("python", ["-m", "tests.test_pyth"]);

//     pyProgr.stdin.write(JSON.stringify(inputData));
//     pyProgr.stdin.end();

//     pyProgr.stdout.on("data", (data) => {
//       console.log("in resolve", data.toString());
//       resolve(data);
//     });

//     pyProgr.stderr.on("data", (data) => {
//       console.log("in stderr reject", data);
//       reject(data);
//     });
//   });

// runPy().then(
//   (value) => console.log("then", value.toString()),
//   (error) => console.log("thenerror", error.toString()),
// );

// pyTest();

async function pyTest() {
  const testSample = 100;
  const randData = [];
  for (let i = 0; i < testSample; i++) {
    const arrSize = getRandomInt(2, 20);

    const points = makeList(arrSize);
    const labels = makeLabels(arrSize);

    // makes sure there are no labels arrays so that a cluster has only one data point or all points are in one cluster
    const labelsNum = new Set(labels).size;
    if (labelsNum <= 1 || labelsNum > labels.length - 1) {
      i--;
      continue;
    }

    randData.push([points, labels]);
  }

  // let pyS;
  // const pyProgr = spawnSync("python", ["-m", "tests.test_pyth", JSON.stringify(randData)]);
  // if (pyProgr.stderr.toString()) {
  //   console.log("stderr", pyProgr.stderr.toString());
  // } else {
  //   pyS = pyProgr.stdout.toString().split(/\r?\n/);
  // }

  const pyProgr = spawn("python", ["-m", "tests.test_pyth"]);
  // pyProgr.stdin.write("test");
  pyProgr.stdin.end(JSON.stringify(randData));

  // pyProgr.stdout.on("data", (data) => {
  //   console.log("on data", data.toString());
  // });

  let pyS = "";
  for await (const chunk of pyProgr.stdout) {
    pyS += chunk;
  }
  pyS = pyS.split(/\r?\n/);

  for await (const chunk of pyProgr.stderr) {
    console.error("stderr chunk: " + chunk);
  }

  for (let i = 0; i < testSample; i++) {
    // console.log("i=", i, "data=", data, "labels=", labels);

    let jsSilhouette;
    try {
      jsSilhouette = silhouetteCoefficient(randData[i][0], randData[i][1]);
    } catch (e) {
      console.log(`${e.name}: ${e.message}`);
    }

    // console.log("jsSilhouette=", jsSilhouette, "pyS=", pyS[i]);
    if (roundDecimal(jsSilhouette) === roundDecimal(pyS[i])) {
      // console.log("Ok");
      // console.log("--------------");
      process.stdout.write("-");
    } else {
      console.log("i=", i, "data=", randData[i][0], "labels=", randData[i][1]);
      console.log("jsSilhouette=", jsSilhouette, "pyS=", pyS[i]);
      console.log("Not ok.");
      // console.log("--------------");
    }
  }
}

/** returns an array of specified arrSize array occupied by random points of pointDim dimenion.
 * if pointDim not given, then the dimension of the poits is random between 1-5. */
function makeList(arrSize, pointDim) {
  const data = [];
  if (!pointDim) {
    pointDim = getRandomInt(1, 7);
  }

  for (let i = 0; i < arrSize; i++) {
    data.push([]);
    for (let j = 0; j < pointDim; j++) {
      data[i].push(getRandomNum(-10, 10));
    }
  }

  return data;
}

/** returns an array of cluster labels corresponding to the datapoints.
 * Of clusterNum is not given, then it will choose a number of clusters between 2 and arrSize */
function makeLabels(arrSize, clusterNum) {
  const labels = [];
  if (!clusterNum) {
    clusterNum = getRandomInt(2, arrSize > 20 ? 20 : arrSize);
  }

  for (let i = 0; i < arrSize; i++) {
    labels.push(getRandomInt(0, clusterNum - 1));
  }
  return labels;
}

/** round number to withing ten decimal places */
function roundDecimal(num) {
  num = parseFloat(num);
  if (num) {
    return Math.round(num * 10000000000) / 10000000000;
  } else {
    return NaN;
  }
}

/** returns random int number between min (inclusive) and max (inclusive) */
function getRandomInt(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

/** returns random decimal number between min (inclusive) and max (exclusive) */
function getRandomNum(min, max) {
  return Math.random() * (max - min) + min;
}

const euclidianDistance = (a, b) => {
  let distance = 0;

  Object.keys(a).forEach((key) => {
    distance += Math.pow(a[key] - b[key], 2);
  });

  return Math.sqrt(distance);
};
